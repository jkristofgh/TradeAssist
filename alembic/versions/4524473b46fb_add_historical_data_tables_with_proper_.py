"""Add historical data tables with proper schema

Revision ID: 4524473b46fb
Revises: 6a20d59e4954
Create Date: 2025-08-30 17:42:59.001604

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4524473b46fb'
down_revision: Union[str, None] = '6a20d59e4954'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_query',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('symbols', sa.Text(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('frequency', sa.String(length=10), nullable=False),
    sa.Column('filters', sa.Text(), nullable=True),
    sa.Column('is_favorite', sa.Boolean(), nullable=False),
    sa.Column('last_executed', sa.DateTime(), nullable=True),
    sa.Column('execution_count', sa.Integer(), nullable=False),
    sa.Column('average_execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('tags', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('data_source',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('provider_type', sa.String(length=50), nullable=False),
    sa.Column('base_url', sa.String(length=255), nullable=True),
    sa.Column('api_key_secret_id', sa.String(length=255), nullable=True),
    sa.Column('rate_limit_per_minute', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('configuration', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('market_data_bar',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('symbol', sa.String(length=50), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('frequency', sa.String(length=10), nullable=False),
    sa.Column('open_price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('high_price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('low_price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('close_price', sa.DECIMAL(precision=10, scale=4), nullable=False),
    sa.Column('volume', sa.Integer(), nullable=False),
    sa.Column('open_interest', sa.Integer(), nullable=True),
    sa.Column('contract_month', sa.String(length=10), nullable=True),
    sa.Column('data_source_id', sa.Integer(), nullable=False),
    sa.Column('is_adjusted', sa.Boolean(), nullable=False),
    sa.Column('quality_score', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('high_price >= open_price AND high_price >= close_price', name='ck_high_price_valid'),
    sa.CheckConstraint('low_price <= open_price AND low_price <= close_price', name='ck_low_price_valid'),
    sa.CheckConstraint('open_price > 0 AND high_price > 0 AND low_price > 0 AND close_price > 0', name='ck_positive_prices'),
    sa.CheckConstraint('quality_score IS NULL OR (quality_score >= 0 AND quality_score <= 100)', name='ck_quality_score_range'),
    sa.CheckConstraint('volume >= 0', name='ck_volume_non_negative'),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_source.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('symbol', 'timestamp', 'frequency', 'data_source_id', name='uq_market_data_bar')
    )
    op.create_index('idx_symbol_freq_timestamp', 'market_data_bar', ['symbol', 'frequency', 'timestamp'], unique=False)
    op.create_index('idx_symbol_timestamp_freq', 'market_data_bar', ['symbol', 'timestamp', 'frequency'], unique=False)
    op.create_index(op.f('ix_market_data_bar_symbol'), 'market_data_bar', ['symbol'], unique=False)
    op.create_index(op.f('ix_market_data_bar_timestamp'), 'market_data_bar', ['timestamp'], unique=False)
    op.drop_index('ix_instruments_symbol', table_name='instruments')
    op.create_index(op.f('ix_instruments_symbol'), 'instruments', ['symbol'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_instruments_symbol'), table_name='instruments')
    op.create_index('ix_instruments_symbol', 'instruments', ['symbol'], unique=False)
    op.drop_index(op.f('ix_market_data_bar_timestamp'), table_name='market_data_bar')
    op.drop_index(op.f('ix_market_data_bar_symbol'), table_name='market_data_bar')
    op.drop_index('idx_symbol_timestamp_freq', table_name='market_data_bar')
    op.drop_index('idx_symbol_freq_timestamp', table_name='market_data_bar')
    op.drop_table('market_data_bar')
    op.drop_table('data_source')
    op.drop_table('data_query')
    # ### end Alembic commands ###
