{"ast":null,"code":"import _objectSpread from\"/home/janos/dev/Trade/TradeAssist/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * WebSocket Context Provider\r\n * \r\n * Provides real-time WebSocket connection management with automatic reconnection,\r\n * message handling, and state management for the entire application.\r\n */import React,{createContext,useContext,useEffect,useReducer,useCallback,useRef}from'react';// =============================================================================\n// STATE MANAGEMENT\n// =============================================================================\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={isConnected:false,reconnectAttempts:0,realtimeData:{},recentAlerts:[],systemHealth:null,error:null};function websocketReducer(state,action){switch(action.type){case'CONNECT':return _objectSpread(_objectSpread({},state),{},{isConnected:true,error:null,reconnectAttempts:0});case'DISCONNECT':return _objectSpread(_objectSpread({},state),{},{isConnected:false});case'RECONNECTING':return _objectSpread(_objectSpread({},state),{},{isConnected:false,reconnectAttempts:state.reconnectAttempts+1});case'ERROR':return _objectSpread(_objectSpread({},state),{},{isConnected:false,error:action.payload});case'TICK_UPDATE':const tickData=action.payload;const marketData={id:Date.now(),// Temporary ID for real-time data\ntimestamp:tickData.timestamp,instrument_id:tickData.instrument_id,price:tickData.price,volume:tickData.volume||null,bid:tickData.bid||null,ask:tickData.ask||null,bid_size:null,ask_size:null,open_price:null,high_price:null,low_price:null};return _objectSpread(_objectSpread({},state),{},{realtimeData:_objectSpread(_objectSpread({},state.realtimeData),{},{[tickData.instrument_id]:marketData})});case'ALERT_FIRED':const alertData=action.payload;const newAlert={id:alertData.alert_id,timestamp:new Date().toISOString(),rule_id:alertData.rule_id,instrument_id:alertData.instrument_id,trigger_value:alertData.trigger_value,threshold_value:alertData.threshold_value,fired_status:'fired',delivery_status:'pending',rule_condition:alertData.rule_condition,alert_message:alertData.message,evaluation_time_ms:null,error_message:null,delivery_attempted_at:null,delivery_completed_at:null};return _objectSpread(_objectSpread({},state),{},{recentAlerts:[newAlert,...state.recentAlerts.slice(0,49)]// Keep last 50 alerts\n});case'HEALTH_STATUS':return _objectSpread(_objectSpread({},state),{},{systemHealth:action.payload});case'RESET_RECONNECT_ATTEMPTS':return _objectSpread(_objectSpread({},state),{},{reconnectAttempts:0});default:return state;}}// =============================================================================\n// CONTEXT DEFINITION\n// =============================================================================\nconst WebSocketContext=/*#__PURE__*/createContext(null);// =============================================================================\n// PROVIDER COMPONENT\n// =============================================================================\nexport const WebSocketProvider=_ref=>{let{children,wsUrl=process.env.REACT_APP_WS_URL||'ws://localhost:8000/ws/realtime',reconnectInterval=3000,maxReconnectAttempts=10}=_ref;const[state,dispatch]=useReducer(websocketReducer,initialState);const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const pingIntervalRef=useRef(null);// =============================================================================\n// WebSocket MESSAGE HANDLING\n// =============================================================================\nconst handleMessage=useCallback(event=>{try{const message=JSON.parse(event.data);switch(message.type){case'tick_update':dispatch({type:'TICK_UPDATE',payload:message.data});break;case'alert_fired':dispatch({type:'ALERT_FIRED',payload:message.data});break;case'health_status':dispatch({type:'HEALTH_STATUS',payload:message.data});break;case'pong':// Handle pong response (connection alive)\nbreak;default:console.warn('Unknown WebSocket message type:',message);}}catch(error){console.error('Failed to parse WebSocket message:',error);}},[]);// =============================================================================\n// CONNECTION MANAGEMENT\n// =============================================================================\nconst connect=useCallback(()=>{var _wsRef$current,_wsRef$current2;if(((_wsRef$current=wsRef.current)===null||_wsRef$current===void 0?void 0:_wsRef$current.readyState)===WebSocket.CONNECTING||((_wsRef$current2=wsRef.current)===null||_wsRef$current2===void 0?void 0:_wsRef$current2.readyState)===WebSocket.OPEN){return;}try{const ws=new WebSocket(wsUrl);wsRef.current=ws;ws.onopen=()=>{console.log('WebSocket connected');dispatch({type:'CONNECT'});// Start ping interval for connection health\npingIntervalRef.current=setInterval(()=>{if(ws.readyState===WebSocket.OPEN){ws.send(JSON.stringify({type:'ping',timestamp:new Date().toISOString()}));}},30000);// Ping every 30 seconds\n};ws.onmessage=handleMessage;ws.onclose=event=>{console.log('WebSocket disconnected:',event.code,event.reason);dispatch({type:'DISCONNECT'});// Clear ping interval\nif(pingIntervalRef.current){clearInterval(pingIntervalRef.current);pingIntervalRef.current=null;}// Attempt reconnection if not intentional disconnect\nif(event.code!==1000&&state.reconnectAttempts<maxReconnectAttempts){const delay=Math.min(reconnectInterval*Math.pow(2,state.reconnectAttempts),30000);console.log(\"Reconnecting in \".concat(delay,\"ms (attempt \").concat(state.reconnectAttempts+1,\")\"));dispatch({type:'RECONNECTING'});reconnectTimeoutRef.current=setTimeout(()=>{connect();},delay);}};ws.onerror=event=>{console.error('WebSocket error:',event);dispatch({type:'ERROR',payload:'WebSocket connection error'});};}catch(error){console.error('Failed to create WebSocket connection:',error);dispatch({type:'ERROR',payload:'Failed to create WebSocket connection'});}},[wsUrl,handleMessage,state.reconnectAttempts,maxReconnectAttempts,reconnectInterval]);const disconnect=useCallback(()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}if(pingIntervalRef.current){clearInterval(pingIntervalRef.current);pingIntervalRef.current=null;}if(wsRef.current){wsRef.current.close(1000,'Intentional disconnect');wsRef.current=null;}dispatch({type:'RESET_RECONNECT_ATTEMPTS'});},[]);const sendMessage=useCallback(message=>{var _wsRef$current3;if(((_wsRef$current3=wsRef.current)===null||_wsRef$current3===void 0?void 0:_wsRef$current3.readyState)===WebSocket.OPEN){wsRef.current.send(JSON.stringify(message));}else{console.warn('WebSocket not connected, message not sent:',message);}},[]);// =============================================================================\n// LIFECYCLE MANAGEMENT\n// =============================================================================\nuseEffect(()=>{connect();return()=>{disconnect();};},[]);// Only run on mount/unmount\n// Cleanup on unmount\nuseEffect(()=>{return()=>{disconnect();};},[disconnect]);// =============================================================================\n// CONTEXT VALUE\n// =============================================================================\nconst contextValue=_objectSpread(_objectSpread({},state),{},{connect,disconnect,sendMessage});return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:contextValue,children:children});};// =============================================================================\n// CUSTOM HOOK\n// =============================================================================\nexport const useWebSocket=()=>{const context=useContext(WebSocketContext);if(!context){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useReducer","useCallback","useRef","jsx","_jsx","initialState","isConnected","reconnectAttempts","realtimeData","recentAlerts","systemHealth","error","websocketReducer","state","action","type","_objectSpread","payload","tickData","marketData","id","Date","now","timestamp","instrument_id","price","volume","bid","ask","bid_size","ask_size","open_price","high_price","low_price","alertData","newAlert","alert_id","toISOString","rule_id","trigger_value","threshold_value","fired_status","delivery_status","rule_condition","alert_message","message","evaluation_time_ms","error_message","delivery_attempted_at","delivery_completed_at","slice","WebSocketContext","WebSocketProvider","_ref","children","wsUrl","process","env","REACT_APP_WS_URL","reconnectInterval","maxReconnectAttempts","dispatch","wsRef","reconnectTimeoutRef","pingIntervalRef","handleMessage","event","JSON","parse","data","console","warn","connect","_wsRef$current","_wsRef$current2","current","readyState","WebSocket","CONNECTING","OPEN","ws","onopen","log","setInterval","send","stringify","onmessage","onclose","code","reason","clearInterval","delay","Math","min","pow","concat","setTimeout","onerror","disconnect","clearTimeout","close","sendMessage","_wsRef$current3","contextValue","Provider","value","useWebSocket","context","Error"],"sources":["/home/janos/dev/Trade/TradeAssist/src/frontend/src/context/WebSocketContext.tsx"],"sourcesContent":["/**\r\n * WebSocket Context Provider\r\n * \r\n * Provides real-time WebSocket connection management with automatic reconnection,\r\n * message handling, and state management for the entire application.\r\n */\r\n\r\nimport React, { createContext, useContext, useEffect, useReducer, useCallback, useRef } from 'react';\r\nimport { \r\n  WebSocketIncomingMessage, \r\n  WebSocketState, \r\n  TickUpdateMessage, \r\n  AlertFiredMessage, \r\n  HealthStatusMessage,\r\n  MarketData,\r\n  AlertLogWithDetails,\r\n  HealthStatus,\r\n  AlertStatus,\r\n  DeliveryStatus\r\n} from '../types';\r\n\r\n// =============================================================================\r\n// STATE MANAGEMENT\r\n// =============================================================================\r\n\r\ninterface WebSocketContextState extends WebSocketState {\r\n  realtimeData: Record<number, MarketData>;\r\n  recentAlerts: AlertLogWithDetails[];\r\n  systemHealth: HealthStatus | null;\r\n}\r\n\r\ntype WebSocketAction = \r\n  | { type: 'CONNECT' }\r\n  | { type: 'DISCONNECT' }\r\n  | { type: 'RECONNECTING' }\r\n  | { type: 'ERROR'; payload: string }\r\n  | { type: 'TICK_UPDATE'; payload: TickUpdateMessage['data'] }\r\n  | { type: 'ALERT_FIRED'; payload: AlertFiredMessage['data'] }\r\n  | { type: 'HEALTH_STATUS'; payload: HealthStatus }\r\n  | { type: 'RESET_RECONNECT_ATTEMPTS' };\r\n\r\nconst initialState: WebSocketContextState = {\r\n  isConnected: false,\r\n  reconnectAttempts: 0,\r\n  realtimeData: {},\r\n  recentAlerts: [],\r\n  systemHealth: null,\r\n  error: null\r\n};\r\n\r\nfunction websocketReducer(state: WebSocketContextState, action: WebSocketAction): WebSocketContextState {\r\n  switch (action.type) {\r\n    case 'CONNECT':\r\n      return {\r\n        ...state,\r\n        isConnected: true,\r\n        error: null,\r\n        reconnectAttempts: 0\r\n      };\r\n    \r\n    case 'DISCONNECT':\r\n      return {\r\n        ...state,\r\n        isConnected: false\r\n      };\r\n    \r\n    case 'RECONNECTING':\r\n      return {\r\n        ...state,\r\n        isConnected: false,\r\n        reconnectAttempts: state.reconnectAttempts + 1\r\n      };\r\n    \r\n    case 'ERROR':\r\n      return {\r\n        ...state,\r\n        isConnected: false,\r\n        error: action.payload\r\n      };\r\n    \r\n    case 'TICK_UPDATE':\r\n      const tickData = action.payload;\r\n      const marketData: MarketData = {\r\n        id: Date.now(), // Temporary ID for real-time data\r\n        timestamp: tickData.timestamp,\r\n        instrument_id: tickData.instrument_id,\r\n        price: tickData.price,\r\n        volume: tickData.volume || null,\r\n        bid: tickData.bid || null,\r\n        ask: tickData.ask || null,\r\n        bid_size: null,\r\n        ask_size: null,\r\n        open_price: null,\r\n        high_price: null,\r\n        low_price: null\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        realtimeData: {\r\n          ...state.realtimeData,\r\n          [tickData.instrument_id]: marketData\r\n        }\r\n      };\r\n    \r\n    case 'ALERT_FIRED':\r\n      const alertData = action.payload;\r\n      const newAlert: AlertLogWithDetails = {\r\n        id: alertData.alert_id,\r\n        timestamp: new Date().toISOString(),\r\n        rule_id: alertData.rule_id,\r\n        instrument_id: alertData.instrument_id,\r\n        trigger_value: alertData.trigger_value,\r\n        threshold_value: alertData.threshold_value,\r\n        fired_status: 'fired' as AlertStatus,\r\n        delivery_status: 'pending' as DeliveryStatus,\r\n        rule_condition: alertData.rule_condition,\r\n        alert_message: alertData.message,\r\n        evaluation_time_ms: null,\r\n        error_message: null,\r\n        delivery_attempted_at: null,\r\n        delivery_completed_at: null\r\n      };\r\n      \r\n      return {\r\n        ...state,\r\n        recentAlerts: [newAlert, ...state.recentAlerts.slice(0, 49)] // Keep last 50 alerts\r\n      };\r\n    \r\n    case 'HEALTH_STATUS':\r\n      return {\r\n        ...state,\r\n        systemHealth: action.payload\r\n      };\r\n    \r\n    case 'RESET_RECONNECT_ATTEMPTS':\r\n      return {\r\n        ...state,\r\n        reconnectAttempts: 0\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// CONTEXT DEFINITION\r\n// =============================================================================\r\n\r\ninterface WebSocketContextValue extends WebSocketContextState {\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  sendMessage: (message: object) => void;\r\n}\r\n\r\nconst WebSocketContext = createContext<WebSocketContextValue | null>(null);\r\n\r\n// =============================================================================\r\n// PROVIDER COMPONENT\r\n// =============================================================================\r\n\r\ninterface WebSocketProviderProps {\r\n  children: React.ReactNode;\r\n  wsUrl?: string;\r\n  reconnectInterval?: number;\r\n  maxReconnectAttempts?: number;\r\n}\r\n\r\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({\r\n  children,\r\n  wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws/realtime',\r\n  reconnectInterval = 3000,\r\n  maxReconnectAttempts = 10\r\n}) => {\r\n  const [state, dispatch] = useReducer(websocketReducer, initialState);\r\n  const wsRef = useRef<WebSocket | null>(null);\r\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // =============================================================================\r\n  // WebSocket MESSAGE HANDLING\r\n  // =============================================================================\r\n  \r\n  const handleMessage = useCallback((event: MessageEvent) => {\r\n    try {\r\n      const message: WebSocketIncomingMessage = JSON.parse(event.data);\r\n      \r\n      switch (message.type) {\r\n        case 'tick_update':\r\n          dispatch({ type: 'TICK_UPDATE', payload: message.data });\r\n          break;\r\n        \r\n        case 'alert_fired':\r\n          dispatch({ type: 'ALERT_FIRED', payload: message.data });\r\n          break;\r\n        \r\n        case 'health_status':\r\n          dispatch({ type: 'HEALTH_STATUS', payload: message.data });\r\n          break;\r\n        \r\n        case 'pong':\r\n          // Handle pong response (connection alive)\r\n          break;\r\n        \r\n        default:\r\n          console.warn('Unknown WebSocket message type:', message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to parse WebSocket message:', error);\r\n    }\r\n  }, []);\r\n\r\n  // =============================================================================\r\n  // CONNECTION MANAGEMENT\r\n  // =============================================================================\r\n  \r\n  const connect = useCallback(() => {\r\n    if (wsRef.current?.readyState === WebSocket.CONNECTING || \r\n        wsRef.current?.readyState === WebSocket.OPEN) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const ws = new WebSocket(wsUrl);\r\n      wsRef.current = ws;\r\n\r\n      ws.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        dispatch({ type: 'CONNECT' });\r\n        \r\n        // Start ping interval for connection health\r\n        pingIntervalRef.current = setInterval(() => {\r\n          if (ws.readyState === WebSocket.OPEN) {\r\n            ws.send(JSON.stringify({ type: 'ping', timestamp: new Date().toISOString() }));\r\n          }\r\n        }, 30000); // Ping every 30 seconds\r\n      };\r\n\r\n      ws.onmessage = handleMessage;\r\n\r\n      ws.onclose = (event) => {\r\n        console.log('WebSocket disconnected:', event.code, event.reason);\r\n        dispatch({ type: 'DISCONNECT' });\r\n        \r\n        // Clear ping interval\r\n        if (pingIntervalRef.current) {\r\n          clearInterval(pingIntervalRef.current);\r\n          pingIntervalRef.current = null;\r\n        }\r\n\r\n        // Attempt reconnection if not intentional disconnect\r\n        if (event.code !== 1000 && state.reconnectAttempts < maxReconnectAttempts) {\r\n          const delay = Math.min(reconnectInterval * Math.pow(2, state.reconnectAttempts), 30000);\r\n          console.log(`Reconnecting in ${delay}ms (attempt ${state.reconnectAttempts + 1})`);\r\n          \r\n          dispatch({ type: 'RECONNECTING' });\r\n          reconnectTimeoutRef.current = setTimeout(() => {\r\n            connect();\r\n          }, delay);\r\n        }\r\n      };\r\n\r\n      ws.onerror = (event) => {\r\n        console.error('WebSocket error:', event);\r\n        dispatch({ type: 'ERROR', payload: 'WebSocket connection error' });\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Failed to create WebSocket connection:', error);\r\n      dispatch({ type: 'ERROR', payload: 'Failed to create WebSocket connection' });\r\n    }\r\n  }, [wsUrl, handleMessage, state.reconnectAttempts, maxReconnectAttempts, reconnectInterval]);\r\n\r\n  const disconnect = useCallback(() => {\r\n    if (reconnectTimeoutRef.current) {\r\n      clearTimeout(reconnectTimeoutRef.current);\r\n      reconnectTimeoutRef.current = null;\r\n    }\r\n    \r\n    if (pingIntervalRef.current) {\r\n      clearInterval(pingIntervalRef.current);\r\n      pingIntervalRef.current = null;\r\n    }\r\n\r\n    if (wsRef.current) {\r\n      wsRef.current.close(1000, 'Intentional disconnect');\r\n      wsRef.current = null;\r\n    }\r\n    \r\n    dispatch({ type: 'RESET_RECONNECT_ATTEMPTS' });\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((message: object) => {\r\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(JSON.stringify(message));\r\n    } else {\r\n      console.warn('WebSocket not connected, message not sent:', message);\r\n    }\r\n  }, []);\r\n\r\n  // =============================================================================\r\n  // LIFECYCLE MANAGEMENT\r\n  // =============================================================================\r\n  \r\n  useEffect(() => {\r\n    connect();\r\n    \r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, []); // Only run on mount/unmount\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [disconnect]);\r\n\r\n  // =============================================================================\r\n  // CONTEXT VALUE\r\n  // =============================================================================\r\n  \r\n  const contextValue: WebSocketContextValue = {\r\n    ...state,\r\n    connect,\r\n    disconnect,\r\n    sendMessage\r\n  };\r\n\r\n  return (\r\n    <WebSocketContext.Provider value={contextValue}>\r\n      {children}\r\n    </WebSocketContext.Provider>\r\n  );\r\n};\r\n\r\n// =============================================================================\r\n// CUSTOM HOOK\r\n// =============================================================================\r\n\r\nexport const useWebSocket = (): WebSocketContextValue => {\r\n  const context = useContext(WebSocketContext);\r\n  if (!context) {\r\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}