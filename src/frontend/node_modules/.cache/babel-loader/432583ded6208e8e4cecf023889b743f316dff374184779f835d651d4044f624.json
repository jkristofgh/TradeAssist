{"ast":null,"code":"import _objectSpread from\"/home/janos/dev/Trade/TradeAssist/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Real-Time Data Management Hook\r\n * \r\n * Provides convenient access to real-time market data, alerts, and system health\r\n * with optimized rendering and data management.\r\n */import{useMemo,useCallback}from'react';import{useWebSocket}from'./useWebSocket';import{InstrumentStatus}from'../types';// =============================================================================\n// REAL-TIME DATA HOOK\n// =============================================================================\nexport const useRealTimeData=function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{instrumentIds,maxAlerts=50,enableHealthMonitoring=true}=options;const{isConnected,error,reconnectAttempts,realtimeData,recentAlerts,systemHealth,connect,disconnect,sendMessage}=useWebSocket();// =============================================================================\n// DERIVED DATA\n// =============================================================================\nconst filteredRealtimeData=useMemo(()=>{if(!(instrumentIds!==null&&instrumentIds!==void 0&&instrumentIds.length)){return realtimeData;}return Object.fromEntries(Object.entries(realtimeData).filter(_ref=>{let[instrumentId]=_ref;return instrumentIds.includes(parseInt(instrumentId,10));}));},[realtimeData,instrumentIds]);const limitedRecentAlerts=useMemo(()=>{return recentAlerts.slice(0,maxAlerts);},[recentAlerts,maxAlerts]);// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\nconst getInstrumentData=useCallback(instrumentId=>{return realtimeData[instrumentId]||null;},[realtimeData]);const getLatestPrice=useCallback(instrumentId=>{const data=realtimeData[instrumentId];return(data===null||data===void 0?void 0:data.price)||null;},[realtimeData]);const getAlertsForInstrument=useCallback(instrumentId=>{return recentAlerts.filter(alert=>alert.instrument_id===instrumentId);},[recentAlerts]);const isSystemHealthy=useMemo(()=>{if(!systemHealth)return false;return systemHealth.status==='healthy'&&systemHealth.database.status==='connected'&&systemHealth.alert_engine.status==='running';},[systemHealth]);// =============================================================================\n// RETURN VALUE\n// =============================================================================\nreturn{// Connection state\nisConnected,connectionError:error||null,reconnectAttempts,// Market data\nrealtimeData:filteredRealtimeData,getInstrumentData,getLatestPrice,// Alerts\nrecentAlerts:limitedRecentAlerts,getAlertsForInstrument,// System health\nsystemHealth:enableHealthMonitoring?systemHealth:null,isSystemHealthy:enableHealthMonitoring?isSystemHealthy:true,// Actions\nconnect,disconnect,sendMessage};};// =============================================================================\n// SPECIALIZED HOOKS\n// =============================================================================\n/**\r\n * Hook for monitoring specific instruments with real-time price updates\r\n */export const useInstrumentWatch=instruments=>{const instrumentIds=instruments.map(i=>i.id);const{realtimeData,getLatestPrice,isConnected}=useRealTimeData({instrumentIds,enableHealthMonitoring:false});const instrumentsWithPrices=useMemo(()=>{return instruments.map(instrument=>_objectSpread(_objectSpread({},instrument),{},{currentPrice:getLatestPrice(instrument.id),realtimeData:realtimeData[instrument.id]||null,isLive:isConnected&&!!realtimeData[instrument.id],priceChange:calculatePriceChange(instrument,realtimeData[instrument.id]),status:determineInstrumentStatus(instrument,realtimeData[instrument.id],isConnected)}));},[instruments,realtimeData,getLatestPrice,isConnected]);return{instruments:instrumentsWithPrices,isConnected,realtimeData};};/**\r\n * Hook for alert monitoring with real-time updates\r\n */export const useAlertMonitor=()=>{const{recentAlerts,isConnected,getAlertsForInstrument}=useRealTimeData({maxAlerts:100,enableHealthMonitoring:false});const alertsByInstrument=useMemo(()=>{const grouped={};recentAlerts.forEach(alert=>{if(!grouped[alert.instrument_id]){grouped[alert.instrument_id]=[];}grouped[alert.instrument_id].push(alert);});return grouped;},[recentAlerts]);const alertStats=useMemo(()=>{const now=new Date();const oneHourAgo=new Date(now.getTime()-60*60*1000);const oneDayAgo=new Date(now.getTime()-24*60*60*1000);return{total:recentAlerts.length,lastHour:recentAlerts.filter(alert=>new Date(alert.timestamp)>=oneHourAgo).length,lastDay:recentAlerts.filter(alert=>new Date(alert.timestamp)>=oneDayAgo).length};},[recentAlerts]);return{recentAlerts,alertsByInstrument,alertStats,isConnected,getAlertsForInstrument};};/**\r\n * Hook for system health monitoring\r\n */export const useSystemHealthMonitor=()=>{const{systemHealth,isSystemHealthy,isConnected}=useRealTimeData({enableHealthMonitoring:true});const healthMetrics=useMemo(()=>{if(!systemHealth)return null;return{uptime:Math.floor(systemHealth.uptime_seconds/60),// minutes\nactiveConnections:systemHealth.websocket.active_connections,maxConnections:systemHealth.websocket.max_connections,avgEvaluationTime:systemHealth.alert_engine.avg_evaluation_time_ms,alertsLastHour:systemHealth.alert_engine.alerts_fired_last_hour,schwabApiStatus:systemHealth.schwab_api.status,databaseConnections:systemHealth.database.active_connections};},[systemHealth]);return{systemHealth,healthMetrics,isSystemHealthy,isConnected};};// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\nfunction calculatePriceChange(instrument,marketData){if(!(marketData!==null&&marketData!==void 0&&marketData.price)||!instrument.last_price){return null;}return(marketData.price-instrument.last_price)/instrument.last_price*100;}function determineInstrumentStatus(instrument,marketData,isConnected){if(!isConnected){return InstrumentStatus.ERROR;}if(!marketData){return instrument.status;}// Check if data is stale (older than 5 minutes)\nconst dataAge=new Date().getTime()-new Date(marketData.timestamp).getTime();if(dataAge>5*60*1000){return InstrumentStatus.INACTIVE;}return InstrumentStatus.ACTIVE;}","map":{"version":3,"names":["useMemo","useCallback","useWebSocket","InstrumentStatus","useRealTimeData","options","arguments","length","undefined","instrumentIds","maxAlerts","enableHealthMonitoring","isConnected","error","reconnectAttempts","realtimeData","recentAlerts","systemHealth","connect","disconnect","sendMessage","filteredRealtimeData","Object","fromEntries","entries","filter","_ref","instrumentId","includes","parseInt","limitedRecentAlerts","slice","getInstrumentData","getLatestPrice","data","price","getAlertsForInstrument","alert","instrument_id","isSystemHealthy","status","database","alert_engine","connectionError","useInstrumentWatch","instruments","map","i","id","instrumentsWithPrices","instrument","_objectSpread","currentPrice","isLive","priceChange","calculatePriceChange","determineInstrumentStatus","useAlertMonitor","alertsByInstrument","grouped","forEach","push","alertStats","now","Date","oneHourAgo","getTime","oneDayAgo","total","lastHour","timestamp","lastDay","useSystemHealthMonitor","healthMetrics","uptime","Math","floor","uptime_seconds","activeConnections","websocket","active_connections","maxConnections","max_connections","avgEvaluationTime","avg_evaluation_time_ms","alertsLastHour","alerts_fired_last_hour","schwabApiStatus","schwab_api","databaseConnections","marketData","last_price","ERROR","dataAge","INACTIVE","ACTIVE"],"sources":["/home/janos/dev/Trade/TradeAssist/src/frontend/src/hooks/useRealTimeData.ts"],"sourcesContent":["/**\r\n * Real-Time Data Management Hook\r\n * \r\n * Provides convenient access to real-time market data, alerts, and system health\r\n * with optimized rendering and data management.\r\n */\r\n\r\nimport { useMemo, useCallback } from 'react';\r\nimport { useWebSocket } from './useWebSocket';\r\nimport { \r\n  Instrument, \r\n  MarketData, \r\n  AlertLogWithDetails, \r\n  HealthStatus,\r\n  InstrumentStatus \r\n} from '../types';\r\n\r\n// =============================================================================\r\n// REAL-TIME DATA HOOK\r\n// =============================================================================\r\n\r\nexport interface UseRealTimeDataOptions {\r\n  instrumentIds?: number[];\r\n  maxAlerts?: number;\r\n  enableHealthMonitoring?: boolean;\r\n}\r\n\r\nexport interface UseRealTimeDataReturn {\r\n  // Connection state\r\n  isConnected: boolean;\r\n  connectionError: string | null;\r\n  reconnectAttempts: number;\r\n  \r\n  // Market data\r\n  realtimeData: Record<number, MarketData>;\r\n  getInstrumentData: (instrumentId: number) => MarketData | null;\r\n  getLatestPrice: (instrumentId: number) => number | null;\r\n  \r\n  // Alerts\r\n  recentAlerts: AlertLogWithDetails[];\r\n  getAlertsForInstrument: (instrumentId: number) => AlertLogWithDetails[];\r\n  \r\n  // System health\r\n  systemHealth: HealthStatus | null;\r\n  isSystemHealthy: boolean;\r\n  \r\n  // Actions\r\n  connect: () => void;\r\n  disconnect: () => void;\r\n  sendMessage: (message: object) => void;\r\n}\r\n\r\nexport const useRealTimeData = (options: UseRealTimeDataOptions = {}): UseRealTimeDataReturn => {\r\n  const {\r\n    instrumentIds,\r\n    maxAlerts = 50,\r\n    enableHealthMonitoring = true\r\n  } = options;\r\n\r\n  const {\r\n    isConnected,\r\n    error,\r\n    reconnectAttempts,\r\n    realtimeData,\r\n    recentAlerts,\r\n    systemHealth,\r\n    connect,\r\n    disconnect,\r\n    sendMessage\r\n  } = useWebSocket();\r\n\r\n  // =============================================================================\r\n  // DERIVED DATA\r\n  // =============================================================================\r\n  \r\n  const filteredRealtimeData = useMemo(() => {\r\n    if (!instrumentIds?.length) {\r\n      return realtimeData;\r\n    }\r\n    \r\n    return Object.fromEntries(\r\n      Object.entries(realtimeData).filter(([instrumentId]) => \r\n        instrumentIds.includes(parseInt(instrumentId, 10))\r\n      )\r\n    );\r\n  }, [realtimeData, instrumentIds]);\r\n\r\n  const limitedRecentAlerts = useMemo(() => {\r\n    return recentAlerts.slice(0, maxAlerts);\r\n  }, [recentAlerts, maxAlerts]);\r\n\r\n  // =============================================================================\r\n  // UTILITY FUNCTIONS\r\n  // =============================================================================\r\n  \r\n  const getInstrumentData = useCallback((instrumentId: number): MarketData | null => {\r\n    return realtimeData[instrumentId] || null;\r\n  }, [realtimeData]);\r\n\r\n  const getLatestPrice = useCallback((instrumentId: number): number | null => {\r\n    const data = realtimeData[instrumentId];\r\n    return data?.price || null;\r\n  }, [realtimeData]);\r\n\r\n  const getAlertsForInstrument = useCallback((instrumentId: number): AlertLogWithDetails[] => {\r\n    return recentAlerts.filter(alert => alert.instrument_id === instrumentId);\r\n  }, [recentAlerts]);\r\n\r\n  const isSystemHealthy = useMemo(() => {\r\n    if (!systemHealth) return false;\r\n    \r\n    return systemHealth.status === 'healthy' &&\r\n           systemHealth.database.status === 'connected' &&\r\n           systemHealth.alert_engine.status === 'running';\r\n  }, [systemHealth]);\r\n\r\n  // =============================================================================\r\n  // RETURN VALUE\r\n  // =============================================================================\r\n  \r\n  return {\r\n    // Connection state\r\n    isConnected,\r\n    connectionError: error || null,\r\n    reconnectAttempts,\r\n    \r\n    // Market data\r\n    realtimeData: filteredRealtimeData,\r\n    getInstrumentData,\r\n    getLatestPrice,\r\n    \r\n    // Alerts\r\n    recentAlerts: limitedRecentAlerts,\r\n    getAlertsForInstrument,\r\n    \r\n    // System health\r\n    systemHealth: enableHealthMonitoring ? systemHealth : null,\r\n    isSystemHealthy: enableHealthMonitoring ? isSystemHealthy : true,\r\n    \r\n    // Actions\r\n    connect,\r\n    disconnect,\r\n    sendMessage\r\n  };\r\n};\r\n\r\n// =============================================================================\r\n// SPECIALIZED HOOKS\r\n// =============================================================================\r\n\r\n/**\r\n * Hook for monitoring specific instruments with real-time price updates\r\n */\r\nexport const useInstrumentWatch = (instruments: Instrument[]) => {\r\n  const instrumentIds = instruments.map(i => i.id);\r\n  \r\n  const { realtimeData, getLatestPrice, isConnected } = useRealTimeData({\r\n    instrumentIds,\r\n    enableHealthMonitoring: false\r\n  });\r\n\r\n  const instrumentsWithPrices = useMemo(() => {\r\n    return instruments.map(instrument => ({\r\n      ...instrument,\r\n      currentPrice: getLatestPrice(instrument.id),\r\n      realtimeData: realtimeData[instrument.id] || null,\r\n      isLive: isConnected && !!realtimeData[instrument.id],\r\n      priceChange: calculatePriceChange(instrument, realtimeData[instrument.id]),\r\n      status: determineInstrumentStatus(instrument, realtimeData[instrument.id], isConnected)\r\n    }));\r\n  }, [instruments, realtimeData, getLatestPrice, isConnected]);\r\n\r\n  return {\r\n    instruments: instrumentsWithPrices,\r\n    isConnected,\r\n    realtimeData\r\n  };\r\n};\r\n\r\n/**\r\n * Hook for alert monitoring with real-time updates\r\n */\r\nexport const useAlertMonitor = () => {\r\n  const { \r\n    recentAlerts, \r\n    isConnected, \r\n    getAlertsForInstrument \r\n  } = useRealTimeData({\r\n    maxAlerts: 100,\r\n    enableHealthMonitoring: false\r\n  });\r\n\r\n  const alertsByInstrument = useMemo(() => {\r\n    const grouped: Record<number, AlertLogWithDetails[]> = {};\r\n    recentAlerts.forEach(alert => {\r\n      if (!grouped[alert.instrument_id]) {\r\n        grouped[alert.instrument_id] = [];\r\n      }\r\n      grouped[alert.instrument_id].push(alert);\r\n    });\r\n    return grouped;\r\n  }, [recentAlerts]);\r\n\r\n  const alertStats = useMemo(() => {\r\n    const now = new Date();\r\n    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\r\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\r\n\r\n    return {\r\n      total: recentAlerts.length,\r\n      lastHour: recentAlerts.filter(alert => \r\n        new Date(alert.timestamp) >= oneHourAgo\r\n      ).length,\r\n      lastDay: recentAlerts.filter(alert => \r\n        new Date(alert.timestamp) >= oneDayAgo\r\n      ).length\r\n    };\r\n  }, [recentAlerts]);\r\n\r\n  return {\r\n    recentAlerts,\r\n    alertsByInstrument,\r\n    alertStats,\r\n    isConnected,\r\n    getAlertsForInstrument\r\n  };\r\n};\r\n\r\n/**\r\n * Hook for system health monitoring\r\n */\r\nexport const useSystemHealthMonitor = () => {\r\n  const { \r\n    systemHealth, \r\n    isSystemHealthy, \r\n    isConnected \r\n  } = useRealTimeData({\r\n    enableHealthMonitoring: true\r\n  });\r\n\r\n  const healthMetrics = useMemo(() => {\r\n    if (!systemHealth) return null;\r\n\r\n    return {\r\n      uptime: Math.floor(systemHealth.uptime_seconds / 60), // minutes\r\n      activeConnections: systemHealth.websocket.active_connections,\r\n      maxConnections: systemHealth.websocket.max_connections,\r\n      avgEvaluationTime: systemHealth.alert_engine.avg_evaluation_time_ms,\r\n      alertsLastHour: systemHealth.alert_engine.alerts_fired_last_hour,\r\n      schwabApiStatus: systemHealth.schwab_api.status,\r\n      databaseConnections: systemHealth.database.active_connections\r\n    };\r\n  }, [systemHealth]);\r\n\r\n  return {\r\n    systemHealth,\r\n    healthMetrics,\r\n    isSystemHealthy,\r\n    isConnected\r\n  };\r\n};\r\n\r\n// =============================================================================\r\n// UTILITY FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction calculatePriceChange(instrument: Instrument, marketData: MarketData | null): number | null {\r\n  if (!marketData?.price || !instrument.last_price) {\r\n    return null;\r\n  }\r\n  \r\n  return ((marketData.price - instrument.last_price) / instrument.last_price) * 100;\r\n}\r\n\r\nfunction determineInstrumentStatus(\r\n  instrument: Instrument, \r\n  marketData: MarketData | null, \r\n  isConnected: boolean\r\n): InstrumentStatus {\r\n  if (!isConnected) {\r\n    return InstrumentStatus.ERROR;\r\n  }\r\n  \r\n  if (!marketData) {\r\n    return instrument.status;\r\n  }\r\n  \r\n  // Check if data is stale (older than 5 minutes)\r\n  const dataAge = new Date().getTime() - new Date(marketData.timestamp).getTime();\r\n  if (dataAge > 5 * 60 * 1000) {\r\n    return InstrumentStatus.INACTIVE;\r\n  }\r\n  \r\n  return InstrumentStatus.ACTIVE;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}