{"ast":null,"code":"import _objectSpread from\"/home/janos/dev/Trade/TradeAssist/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * API Client Service\r\n * \r\n * Centralized HTTP client for communicating with the TradeAssist FastAPI backend.\r\n * Provides type-safe methods for all backend endpoints with proper error handling,\r\n * request/response transformation, and optimistic updates.\r\n */// =============================================================================\n// API CLIENT CLASS\n// =============================================================================\nexport class ApiClient{constructor(baseUrl){this.baseUrl=void 0;this.defaultHeaders=void 0;this.baseUrl=baseUrl||process.env.REACT_APP_API_BASE_URL||'http://localhost:8000';this.defaultHeaders={'Content-Type':'application/json'};}// =============================================================================\n// CORE HTTP METHODS\n// =============================================================================\nasync request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(this.baseUrl).concat(endpoint);const config=_objectSpread(_objectSpread({},options),{},{headers:_objectSpread(_objectSpread({},this.defaultHeaders),options.headers)});try{const response=await fetch(url,config);// Handle non-JSON responses (like 204 No Content)\nif(response.status===204){return{};}const data=await response.json();if(!response.ok){throw new ApiError(response.status,data.message||data.detail||'Request failed',data);}return data;}catch(error){if(error instanceof ApiError){throw error;}// Network or parsing errors\nthrow new ApiError(0,error instanceof Error?error.message:'Unknown error occurred',null);}}async get(endpoint,params){const url=params?\"\".concat(endpoint,\"?\").concat(new URLSearchParams(this.serializeParams(params))):endpoint;return this.request(url,{method:'GET'});}async post(endpoint,data){return this.request(endpoint,{method:'POST',body:data?JSON.stringify(data):undefined});}async put(endpoint,data){return this.request(endpoint,{method:'PUT',body:data?JSON.stringify(data):undefined});}async delete(endpoint){return this.request(endpoint,{method:'DELETE'});}// =============================================================================\n// HEALTH API\n// =============================================================================\nasync getHealth(){return this.get('/api/health');}async getDetailedHealth(){return this.get('/api/health/detailed');}// =============================================================================\n// INSTRUMENTS API\n// =============================================================================\nasync getInstruments(filters){return this.get('/api/instruments',filters);}async getInstrument(id){return this.get(\"/api/instruments/\".concat(id));}async createInstrument(data){return this.post('/api/instruments',data);}async updateInstrument(id,data){return this.put(\"/api/instruments/\".concat(id),data);}async deleteInstrument(id){return this.delete(\"/api/instruments/\".concat(id));}// =============================================================================\n// ALERT RULES API\n// =============================================================================\nasync getAlertRules(filters){return this.get('/api/rules',filters);}async getAlertRule(id){return this.get(\"/api/rules/\".concat(id));}async createAlertRule(data){return this.post('/api/rules',data);}async updateAlertRule(id,data){return this.put(\"/api/rules/\".concat(id),data);}async deleteAlertRule(id){return this.delete(\"/api/rules/\".concat(id));}// Bulk operations\nasync bulkUpdateAlertRules(updates){const promises=updates.map(_ref=>{let{id,data}=_ref;return this.updateAlertRule(id,data);});return Promise.all(promises);}async bulkDeleteAlertRules(ids){const promises=ids.map(id=>this.deleteAlertRule(id));await Promise.all(promises);}async toggleAlertRules(ids,active){return this.bulkUpdateAlertRules(ids.map(id=>({id,data:{active}})));}// =============================================================================\n// ALERTS API\n// =============================================================================\nasync getAlerts(filters,pagination){const params=_objectSpread(_objectSpread({},filters),pagination);return this.get('/api/alerts',params);}async getAlertStats(){return this.get('/api/alerts/stats');}async deleteAlert(id){return this.delete(\"/api/alerts/\".concat(id));}// Export alerts to CSV\nasync exportAlerts(filters){const params=_objectSpread(_objectSpread({},filters),{},{format:'csv'});const url=\"\".concat(this.baseUrl,\"/api/alerts/export?\").concat(new URLSearchParams(this.serializeParams(params)));const response=await fetch(url,{headers:this.defaultHeaders});if(!response.ok){throw new ApiError(response.status,'Failed to export alerts',null);}return response.blob();}// =============================================================================\n// UTILITY METHODS\n// =============================================================================\nserializeParams(params){const serialized={};Object.entries(params).forEach(_ref2=>{let[key,value]=_ref2;if(value!==undefined&&value!==null){serialized[key]=String(value);}});return serialized;}// Update base URL (useful for environment switching)\nsetBaseUrl(baseUrl){this.baseUrl=baseUrl;}// Add authentication header\nsetAuthToken(token){this.defaultHeaders['Authorization']=\"Bearer \".concat(token);}// Remove authentication header\nclearAuthToken(){delete this.defaultHeaders['Authorization'];}}// =============================================================================\n// ERROR HANDLING\n// =============================================================================\nexport class ApiError extends Error{constructor(status,message){let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;super(message);this.status=status;this.data=data;this.name='ApiError';}get isNetworkError(){return this.status===0;}get isClientError(){return this.status>=400&&this.status<500;}get isServerError(){return this.status>=500;}get isValidationError(){return this.status===422;}get isNotFoundError(){return this.status===404;}get isUnauthorizedError(){return this.status===401;}get isForbiddenError(){return this.status===403;}}// =============================================================================\n// SINGLETON INSTANCE\n// =============================================================================\nexport const apiClient=new ApiClient();// =============================================================================\n// REACT QUERY INTEGRATION HELPERS\n// =============================================================================\n/**\r\n * Query key factory for consistent cache keys\r\n */export const queryKeys={// Health\nhealth:()=>['health'],healthDetailed:()=>['health','detailed'],// Instruments\ninstruments:filters=>['instruments',filters],instrument:id=>['instruments',id],// Alert Rules\nalertRules:filters=>['alertRules',filters],alertRule:id=>['alertRules',id],// Alerts\nalerts:(filters,pagination)=>['alerts',filters,pagination],alertStats:()=>['alerts','stats']};/**\r\n * Mutation options factory for consistent cache invalidation\r\n */export const mutationOptions={instrument:{onSuccess:()=>{// Invalidate instruments queries - handled by React Query in components\n}},alertRule:{onSuccess:()=>{// Invalidate alert rules queries - handled by React Query in components\n}},alert:{onSuccess:()=>{// Invalidate alerts queries - handled by React Query in components\n}}};","map":{"version":3,"names":["ApiClient","constructor","baseUrl","defaultHeaders","process","env","REACT_APP_API_BASE_URL","request","endpoint","options","arguments","length","undefined","url","concat","config","_objectSpread","headers","response","fetch","status","data","json","ok","ApiError","message","detail","error","Error","get","params","URLSearchParams","serializeParams","method","post","body","JSON","stringify","put","delete","getHealth","getDetailedHealth","getInstruments","filters","getInstrument","id","createInstrument","updateInstrument","deleteInstrument","getAlertRules","getAlertRule","createAlertRule","updateAlertRule","deleteAlertRule","bulkUpdateAlertRules","updates","promises","map","_ref","Promise","all","bulkDeleteAlertRules","ids","toggleAlertRules","active","getAlerts","pagination","getAlertStats","deleteAlert","exportAlerts","format","blob","serialized","Object","entries","forEach","_ref2","key","value","String","setBaseUrl","setAuthToken","token","clearAuthToken","name","isNetworkError","isClientError","isServerError","isValidationError","isNotFoundError","isUnauthorizedError","isForbiddenError","apiClient","queryKeys","health","healthDetailed","instruments","instrument","alertRules","alertRule","alerts","alertStats","mutationOptions","onSuccess","alert"],"sources":["/home/janos/dev/Trade/TradeAssist/src/frontend/src/services/apiClient.ts"],"sourcesContent":["/**\r\n * API Client Service\r\n * \r\n * Centralized HTTP client for communicating with the TradeAssist FastAPI backend.\r\n * Provides type-safe methods for all backend endpoints with proper error handling,\r\n * request/response transformation, and optimistic updates.\r\n */\r\n\r\nimport {\r\n  Instrument,\r\n  InstrumentWithDetails,\r\n  AlertRule,\r\n  AlertRuleWithDetails,\r\n  AlertLog,\r\n  AlertLogWithDetails,\r\n  HealthStatus,\r\n  AlertStats,\r\n  CreateInstrumentRequest,\r\n  UpdateInstrumentRequest,\r\n  CreateAlertRuleRequest,\r\n  UpdateAlertRuleRequest,\r\n  InstrumentFilters,\r\n  AlertRuleFilters,\r\n  AlertLogFilters,\r\n  PaginationParams,\r\n  PaginatedResponse,\r\n  ApiResponse\r\n} from '../types';\r\n\r\n// =============================================================================\r\n// API CLIENT CLASS\r\n// =============================================================================\r\n\r\nexport class ApiClient {\r\n  private baseUrl: string;\r\n  private defaultHeaders: Record<string, string>;\r\n\r\n  constructor(baseUrl?: string) {\r\n    this.baseUrl = baseUrl || process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000';\r\n    this.defaultHeaders = {\r\n      'Content-Type': 'application/json',\r\n    };\r\n  }\r\n\r\n  // =============================================================================\r\n  // CORE HTTP METHODS\r\n  // =============================================================================\r\n\r\n  private async request<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<T> {\r\n    const url = `${this.baseUrl}${endpoint}`;\r\n    const config: RequestInit = {\r\n      ...options,\r\n      headers: {\r\n        ...this.defaultHeaders,\r\n        ...options.headers,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Handle non-JSON responses (like 204 No Content)\r\n      if (response.status === 204) {\r\n        return {} as T;\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new ApiError(\r\n          response.status,\r\n          data.message || data.detail || 'Request failed',\r\n          data\r\n        );\r\n      }\r\n\r\n      return data as T;\r\n    } catch (error) {\r\n      if (error instanceof ApiError) {\r\n        throw error;\r\n      }\r\n\r\n      // Network or parsing errors\r\n      throw new ApiError(\r\n        0,\r\n        error instanceof Error ? error.message : 'Unknown error occurred',\r\n        null\r\n      );\r\n    }\r\n  }\r\n\r\n  private async get<T>(endpoint: string, params?: Record<string, any>): Promise<T> {\r\n    const url = params ? `${endpoint}?${new URLSearchParams(this.serializeParams(params))}` : endpoint;\r\n    return this.request<T>(url, { method: 'GET' });\r\n  }\r\n\r\n  private async post<T>(endpoint: string, data?: any): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'POST',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  private async put<T>(endpoint: string, data?: any): Promise<T> {\r\n    return this.request<T>(endpoint, {\r\n      method: 'PUT',\r\n      body: data ? JSON.stringify(data) : undefined,\r\n    });\r\n  }\r\n\r\n  private async delete<T>(endpoint: string): Promise<T> {\r\n    return this.request<T>(endpoint, { method: 'DELETE' });\r\n  }\r\n\r\n  // =============================================================================\r\n  // HEALTH API\r\n  // =============================================================================\r\n\r\n  async getHealth(): Promise<HealthStatus> {\r\n    return this.get<HealthStatus>('/api/health');\r\n  }\r\n\r\n  async getDetailedHealth(): Promise<HealthStatus> {\r\n    return this.get<HealthStatus>('/api/health/detailed');\r\n  }\r\n\r\n  // =============================================================================\r\n  // INSTRUMENTS API\r\n  // =============================================================================\r\n\r\n  async getInstruments(filters?: InstrumentFilters): Promise<Instrument[]> {\r\n    return this.get<Instrument[]>('/api/instruments', filters);\r\n  }\r\n\r\n  async getInstrument(id: number): Promise<InstrumentWithDetails> {\r\n    return this.get<InstrumentWithDetails>(`/api/instruments/${id}`);\r\n  }\r\n\r\n  async createInstrument(data: CreateInstrumentRequest): Promise<Instrument> {\r\n    return this.post<Instrument>('/api/instruments', data);\r\n  }\r\n\r\n  async updateInstrument(id: number, data: UpdateInstrumentRequest): Promise<Instrument> {\r\n    return this.put<Instrument>(`/api/instruments/${id}`, data);\r\n  }\r\n\r\n  async deleteInstrument(id: number): Promise<void> {\r\n    return this.delete<void>(`/api/instruments/${id}`);\r\n  }\r\n\r\n  // =============================================================================\r\n  // ALERT RULES API\r\n  // =============================================================================\r\n\r\n  async getAlertRules(filters?: AlertRuleFilters): Promise<AlertRule[]> {\r\n    return this.get<AlertRule[]>('/api/rules', filters);\r\n  }\r\n\r\n  async getAlertRule(id: number): Promise<AlertRuleWithDetails> {\r\n    return this.get<AlertRuleWithDetails>(`/api/rules/${id}`);\r\n  }\r\n\r\n  async createAlertRule(data: CreateAlertRuleRequest): Promise<AlertRule> {\r\n    return this.post<AlertRule>('/api/rules', data);\r\n  }\r\n\r\n  async updateAlertRule(id: number, data: UpdateAlertRuleRequest): Promise<AlertRule> {\r\n    return this.put<AlertRule>(`/api/rules/${id}`, data);\r\n  }\r\n\r\n  async deleteAlertRule(id: number): Promise<void> {\r\n    return this.delete<void>(`/api/rules/${id}`);\r\n  }\r\n\r\n  // Bulk operations\r\n  async bulkUpdateAlertRules(updates: Array<{ id: number; data: UpdateAlertRuleRequest }>): Promise<AlertRule[]> {\r\n    const promises = updates.map(({ id, data }) => this.updateAlertRule(id, data));\r\n    return Promise.all(promises);\r\n  }\r\n\r\n  async bulkDeleteAlertRules(ids: number[]): Promise<void> {\r\n    const promises = ids.map(id => this.deleteAlertRule(id));\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  async toggleAlertRules(ids: number[], active: boolean): Promise<AlertRule[]> {\r\n    return this.bulkUpdateAlertRules(\r\n      ids.map(id => ({ id, data: { active } }))\r\n    );\r\n  }\r\n\r\n  // =============================================================================\r\n  // ALERTS API\r\n  // =============================================================================\r\n\r\n  async getAlerts(\r\n    filters?: AlertLogFilters,\r\n    pagination?: PaginationParams\r\n  ): Promise<PaginatedResponse<AlertLogWithDetails>> {\r\n    const params = { ...filters, ...pagination };\r\n    return this.get<PaginatedResponse<AlertLogWithDetails>>('/api/alerts', params);\r\n  }\r\n\r\n  async getAlertStats(): Promise<AlertStats> {\r\n    return this.get<AlertStats>('/api/alerts/stats');\r\n  }\r\n\r\n  async deleteAlert(id: number): Promise<void> {\r\n    return this.delete<void>(`/api/alerts/${id}`);\r\n  }\r\n\r\n  // Export alerts to CSV\r\n  async exportAlerts(filters?: AlertLogFilters): Promise<Blob> {\r\n    const params = { ...filters, format: 'csv' };\r\n    const url = `${this.baseUrl}/api/alerts/export?${new URLSearchParams(this.serializeParams(params))}`;\r\n    \r\n    const response = await fetch(url, {\r\n      headers: this.defaultHeaders,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new ApiError(response.status, 'Failed to export alerts', null);\r\n    }\r\n\r\n    return response.blob();\r\n  }\r\n\r\n  // =============================================================================\r\n  // UTILITY METHODS\r\n  // =============================================================================\r\n\r\n  private serializeParams(params: Record<string, any>): Record<string, string> {\r\n    const serialized: Record<string, string> = {};\r\n    \r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null) {\r\n        serialized[key] = String(value);\r\n      }\r\n    });\r\n\r\n    return serialized;\r\n  }\r\n\r\n  // Update base URL (useful for environment switching)\r\n  setBaseUrl(baseUrl: string): void {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  // Add authentication header\r\n  setAuthToken(token: string): void {\r\n    this.defaultHeaders['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  // Remove authentication header\r\n  clearAuthToken(): void {\r\n    delete this.defaultHeaders['Authorization'];\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// ERROR HANDLING\r\n// =============================================================================\r\n\r\nexport class ApiError extends Error {\r\n  constructor(\r\n    public status: number,\r\n    message: string,\r\n    public data: any = null\r\n  ) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n  }\r\n\r\n  get isNetworkError(): boolean {\r\n    return this.status === 0;\r\n  }\r\n\r\n  get isClientError(): boolean {\r\n    return this.status >= 400 && this.status < 500;\r\n  }\r\n\r\n  get isServerError(): boolean {\r\n    return this.status >= 500;\r\n  }\r\n\r\n  get isValidationError(): boolean {\r\n    return this.status === 422;\r\n  }\r\n\r\n  get isNotFoundError(): boolean {\r\n    return this.status === 404;\r\n  }\r\n\r\n  get isUnauthorizedError(): boolean {\r\n    return this.status === 401;\r\n  }\r\n\r\n  get isForbiddenError(): boolean {\r\n    return this.status === 403;\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// SINGLETON INSTANCE\r\n// =============================================================================\r\n\r\nexport const apiClient = new ApiClient();\r\n\r\n// =============================================================================\r\n// REACT QUERY INTEGRATION HELPERS\r\n// =============================================================================\r\n\r\n/**\r\n * Query key factory for consistent cache keys\r\n */\r\nexport const queryKeys = {\r\n  // Health\r\n  health: () => ['health'] as const,\r\n  healthDetailed: () => ['health', 'detailed'] as const,\r\n\r\n  // Instruments\r\n  instruments: (filters?: InstrumentFilters) => ['instruments', filters] as const,\r\n  instrument: (id: number) => ['instruments', id] as const,\r\n\r\n  // Alert Rules\r\n  alertRules: (filters?: AlertRuleFilters) => ['alertRules', filters] as const,\r\n  alertRule: (id: number) => ['alertRules', id] as const,\r\n\r\n  // Alerts\r\n  alerts: (filters?: AlertLogFilters, pagination?: PaginationParams) => \r\n    ['alerts', filters, pagination] as const,\r\n  alertStats: () => ['alerts', 'stats'] as const,\r\n};\r\n\r\n/**\r\n * Mutation options factory for consistent cache invalidation\r\n */\r\nexport const mutationOptions = {\r\n  instrument: {\r\n    onSuccess: () => {\r\n      // Invalidate instruments queries - handled by React Query in components\r\n    }\r\n  },\r\n  alertRule: {\r\n    onSuccess: () => {\r\n      // Invalidate alert rules queries - handled by React Query in components\r\n    }\r\n  },\r\n  alert: {\r\n    onSuccess: () => {\r\n      // Invalidate alerts queries - handled by React Query in components\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}