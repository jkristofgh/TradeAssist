{"ast":null,"code":"/**\r\n * TypeScript type definitions for TradeAssist Frontend\r\n * \r\n * These types correspond to the backend SQLAlchemy models and API responses\r\n * to ensure type safety across the full stack.\r\n */// =============================================================================\n// ENUMS\n// =============================================================================\nexport let InstrumentType=/*#__PURE__*/function(InstrumentType){InstrumentType[\"FUTURE\"]=\"future\";InstrumentType[\"INDEX\"]=\"index\";InstrumentType[\"INTERNAL\"]=\"internal\";return InstrumentType;}({});export let InstrumentStatus=/*#__PURE__*/function(InstrumentStatus){InstrumentStatus[\"ACTIVE\"]=\"active\";InstrumentStatus[\"INACTIVE\"]=\"inactive\";InstrumentStatus[\"ERROR\"]=\"error\";return InstrumentStatus;}({});export let RuleType=/*#__PURE__*/function(RuleType){RuleType[\"THRESHOLD\"]=\"threshold\";RuleType[\"CROSSOVER\"]=\"crossover\";RuleType[\"RATE_OF_CHANGE\"]=\"rate_of_change\";RuleType[\"VOLUME_SPIKE\"]=\"volume_spike\";RuleType[\"MULTI_CONDITION\"]=\"multi_condition\";return RuleType;}({});export let RuleCondition=/*#__PURE__*/function(RuleCondition){RuleCondition[\"ABOVE\"]=\"above\";RuleCondition[\"BELOW\"]=\"below\";RuleCondition[\"EQUALS\"]=\"equals\";RuleCondition[\"CROSSES_ABOVE\"]=\"crosses_above\";RuleCondition[\"CROSSES_BELOW\"]=\"crosses_below\";RuleCondition[\"PERCENT_CHANGE_UP\"]=\"percent_change_up\";RuleCondition[\"PERCENT_CHANGE_DOWN\"]=\"percent_change_down\";RuleCondition[\"VOLUME_ABOVE\"]=\"volume_above\";return RuleCondition;}({});export let AlertStatus=/*#__PURE__*/function(AlertStatus){AlertStatus[\"FIRED\"]=\"fired\";AlertStatus[\"SUPPRESSED\"]=\"suppressed\";AlertStatus[\"ERROR\"]=\"error\";return AlertStatus;}({});export let DeliveryStatus=/*#__PURE__*/function(DeliveryStatus){DeliveryStatus[\"PENDING\"]=\"pending\";DeliveryStatus[\"IN_APP_SENT\"]=\"in_app_sent\";DeliveryStatus[\"SOUND_PLAYED\"]=\"sound_played\";DeliveryStatus[\"SLACK_SENT\"]=\"slack_sent\";DeliveryStatus[\"ALL_DELIVERED\"]=\"all_delivered\";DeliveryStatus[\"FAILED\"]=\"failed\";return DeliveryStatus;}({});// =============================================================================\n// BASE MODELS\n// =============================================================================\n// =============================================================================\n// EXTENDED MODELS WITH RELATIONSHIPS\n// =============================================================================\n// =============================================================================\n// API RESPONSE TYPES\n// =============================================================================\n// =============================================================================\n// WEBSOCKET MESSAGE TYPES\n// =============================================================================\n// =============================================================================\n// FORM TYPES\n// =============================================================================\n// =============================================================================\n// FILTER/QUERY TYPES\n// =============================================================================\n// =============================================================================\n// UI STATE TYPES\n// =============================================================================\n// =============================================================================\n// UTILITY TYPES\n// =============================================================================","map":{"version":3,"names":["InstrumentType","InstrumentStatus","RuleType","RuleCondition","AlertStatus","DeliveryStatus"],"sources":["/home/janos/dev/Trade/TradeAssist/src/frontend/src/types/index.ts"],"sourcesContent":["/**\r\n * TypeScript type definitions for TradeAssist Frontend\r\n * \r\n * These types correspond to the backend SQLAlchemy models and API responses\r\n * to ensure type safety across the full stack.\r\n */\r\n\r\n// =============================================================================\r\n// ENUMS\r\n// =============================================================================\r\n\r\nexport enum InstrumentType {\r\n  FUTURE = 'future',\r\n  INDEX = 'index',\r\n  INTERNAL = 'internal'\r\n}\r\n\r\nexport enum InstrumentStatus {\r\n  ACTIVE = 'active',\r\n  INACTIVE = 'inactive',\r\n  ERROR = 'error'\r\n}\r\n\r\nexport enum RuleType {\r\n  THRESHOLD = 'threshold',\r\n  CROSSOVER = 'crossover',\r\n  RATE_OF_CHANGE = 'rate_of_change',\r\n  VOLUME_SPIKE = 'volume_spike',\r\n  MULTI_CONDITION = 'multi_condition'\r\n}\r\n\r\nexport enum RuleCondition {\r\n  ABOVE = 'above',\r\n  BELOW = 'below',\r\n  EQUALS = 'equals',\r\n  CROSSES_ABOVE = 'crosses_above',\r\n  CROSSES_BELOW = 'crosses_below',\r\n  PERCENT_CHANGE_UP = 'percent_change_up',\r\n  PERCENT_CHANGE_DOWN = 'percent_change_down',\r\n  VOLUME_ABOVE = 'volume_above'\r\n}\r\n\r\nexport enum AlertStatus {\r\n  FIRED = 'fired',\r\n  SUPPRESSED = 'suppressed',\r\n  ERROR = 'error'\r\n}\r\n\r\nexport enum DeliveryStatus {\r\n  PENDING = 'pending',\r\n  IN_APP_SENT = 'in_app_sent',\r\n  SOUND_PLAYED = 'sound_played',\r\n  SLACK_SENT = 'slack_sent',\r\n  ALL_DELIVERED = 'all_delivered',\r\n  FAILED = 'failed'\r\n}\r\n\r\n// =============================================================================\r\n// BASE MODELS\r\n// =============================================================================\r\n\r\nexport interface Instrument {\r\n  id: number;\r\n  symbol: string;\r\n  name: string;\r\n  type: InstrumentType;\r\n  status: InstrumentStatus;\r\n  last_tick?: string | null; // ISO datetime string\r\n  last_price?: number | null;\r\n  created_at: string; // ISO datetime string\r\n  updated_at: string; // ISO datetime string\r\n}\r\n\r\nexport interface MarketData {\r\n  id: number;\r\n  timestamp: string; // ISO datetime string\r\n  instrument_id: number;\r\n  price?: number | null;\r\n  volume?: number | null;\r\n  bid?: number | null;\r\n  ask?: number | null;\r\n  bid_size?: number | null;\r\n  ask_size?: number | null;\r\n  open_price?: number | null;\r\n  high_price?: number | null;\r\n  low_price?: number | null;\r\n}\r\n\r\nexport interface AlertRule {\r\n  id: number;\r\n  instrument_id: number;\r\n  rule_type: RuleType;\r\n  condition: RuleCondition;\r\n  threshold: number;\r\n  active: boolean;\r\n  name?: string | null;\r\n  description?: string | null;\r\n  time_window_seconds?: number | null;\r\n  moving_average_period?: number | null;\r\n  cooldown_seconds: number;\r\n  last_triggered?: string | null; // ISO datetime string\r\n  created_at: string; // ISO datetime string\r\n  updated_at: string; // ISO datetime string\r\n}\r\n\r\nexport interface AlertLog {\r\n  id: number;\r\n  timestamp: string; // ISO datetime string\r\n  rule_id: number;\r\n  instrument_id: number;\r\n  trigger_value: number;\r\n  threshold_value: number;\r\n  fired_status: AlertStatus;\r\n  delivery_status: DeliveryStatus;\r\n  evaluation_time_ms?: number | null;\r\n  rule_condition: RuleCondition;\r\n  alert_message?: string | null;\r\n  error_message?: string | null;\r\n  delivery_attempted_at?: string | null; // ISO datetime string\r\n  delivery_completed_at?: string | null; // ISO datetime string\r\n}\r\n\r\n// =============================================================================\r\n// EXTENDED MODELS WITH RELATIONSHIPS\r\n// =============================================================================\r\n\r\nexport interface InstrumentWithDetails extends Instrument {\r\n  market_data?: MarketData[];\r\n  alert_rules?: AlertRule[];\r\n  alert_logs?: AlertLog[];\r\n}\r\n\r\nexport interface AlertRuleWithDetails extends AlertRule {\r\n  instrument?: Instrument;\r\n  alert_logs?: AlertLog[];\r\n}\r\n\r\nexport interface AlertLogWithDetails extends AlertLog {\r\n  rule?: AlertRule;\r\n  instrument?: Instrument;\r\n}\r\n\r\n// =============================================================================\r\n// API RESPONSE TYPES\r\n// =============================================================================\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface PaginatedResponse<T> {\r\n  items: T[];\r\n  total: number;\r\n  page: number;\r\n  per_page: number;\r\n  pages: number;\r\n}\r\n\r\nexport interface HealthStatus {\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  timestamp: string;\r\n  uptime_seconds: number;\r\n  version: string;\r\n  database: {\r\n    status: 'connected' | 'disconnected';\r\n    connection_pool_size: number;\r\n    active_connections: number;\r\n  };\r\n  websocket: {\r\n    active_connections: number;\r\n    max_connections: number;\r\n  };\r\n  alert_engine: {\r\n    status: 'running' | 'stopped' | 'error';\r\n    rules_active: number;\r\n    rules_total: number;\r\n    avg_evaluation_time_ms: number;\r\n    alerts_fired_last_hour: number;\r\n  };\r\n  schwab_api: {\r\n    status: 'connected' | 'disconnected' | 'error';\r\n    last_successful_request: string | null;\r\n    request_count_24h: number;\r\n    error_count_24h: number;\r\n  };\r\n}\r\n\r\nexport interface AlertStats {\r\n  total_alerts: number;\r\n  alerts_today: number;\r\n  alerts_last_hour: number;\r\n  avg_evaluation_time_ms: number;\r\n  success_rate_24h: number;\r\n  alerts_by_status: Record<AlertStatus, number>;\r\n  alerts_by_delivery_status: Record<DeliveryStatus, number>;\r\n  top_triggered_rules: Array<{\r\n    rule_id: number;\r\n    rule_name: string;\r\n    count: number;\r\n  }>;\r\n}\r\n\r\n// =============================================================================\r\n// WEBSOCKET MESSAGE TYPES\r\n// =============================================================================\r\n\r\nexport interface WebSocketMessage {\r\n  type: 'tick_update' | 'alert_fired' | 'health_status' | 'ping' | 'pong';\r\n  timestamp: string;\r\n}\r\n\r\nexport interface TickUpdateMessage extends WebSocketMessage {\r\n  type: 'tick_update';\r\n  data: {\r\n    instrument_id: number;\r\n    symbol: string;\r\n    price: number;\r\n    volume?: number;\r\n    bid?: number;\r\n    ask?: number;\r\n    timestamp: string;\r\n  };\r\n}\r\n\r\nexport interface AlertFiredMessage extends WebSocketMessage {\r\n  type: 'alert_fired';\r\n  data: {\r\n    alert_id: number;\r\n    rule_id: number;\r\n    instrument_id: number;\r\n    symbol: string;\r\n    trigger_value: number;\r\n    threshold_value: number;\r\n    rule_condition: RuleCondition;\r\n    message: string;\r\n  };\r\n}\r\n\r\nexport interface HealthStatusMessage extends WebSocketMessage {\r\n  type: 'health_status';\r\n  data: HealthStatus;\r\n}\r\n\r\nexport interface PingMessage extends WebSocketMessage {\r\n  type: 'ping';\r\n}\r\n\r\nexport interface PongMessage extends WebSocketMessage {\r\n  type: 'pong';\r\n}\r\n\r\nexport type WebSocketIncomingMessage = \r\n  | TickUpdateMessage \r\n  | AlertFiredMessage \r\n  | HealthStatusMessage \r\n  | PongMessage;\r\n\r\n// =============================================================================\r\n// FORM TYPES\r\n// =============================================================================\r\n\r\nexport interface CreateInstrumentRequest {\r\n  symbol: string;\r\n  name: string;\r\n  type: InstrumentType;\r\n  status?: InstrumentStatus;\r\n}\r\n\r\nexport interface UpdateInstrumentRequest {\r\n  name?: string;\r\n  type?: InstrumentType;\r\n  status?: InstrumentStatus;\r\n}\r\n\r\nexport interface CreateAlertRuleRequest {\r\n  instrument_id: number;\r\n  rule_type: RuleType;\r\n  condition: RuleCondition;\r\n  threshold: number;\r\n  active?: boolean;\r\n  name?: string;\r\n  description?: string;\r\n  time_window_seconds?: number;\r\n  moving_average_period?: number;\r\n  cooldown_seconds?: number;\r\n}\r\n\r\nexport interface UpdateAlertRuleRequest {\r\n  rule_type?: RuleType;\r\n  condition?: RuleCondition;\r\n  threshold?: number;\r\n  active?: boolean;\r\n  name?: string;\r\n  description?: string;\r\n  time_window_seconds?: number;\r\n  moving_average_period?: number;\r\n  cooldown_seconds?: number;\r\n}\r\n\r\n// =============================================================================\r\n// FILTER/QUERY TYPES\r\n// =============================================================================\r\n\r\nexport interface InstrumentFilters {\r\n  type?: InstrumentType;\r\n  status?: InstrumentStatus;\r\n  symbol_contains?: string;\r\n}\r\n\r\nexport interface AlertRuleFilters {\r\n  instrument_id?: number;\r\n  rule_type?: RuleType;\r\n  active?: boolean;\r\n  condition?: RuleCondition;\r\n}\r\n\r\nexport interface AlertLogFilters {\r\n  instrument_id?: number;\r\n  rule_id?: number;\r\n  fired_status?: AlertStatus;\r\n  delivery_status?: DeliveryStatus;\r\n  start_date?: string;\r\n  end_date?: string;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  page?: number;\r\n  per_page?: number;\r\n  sort_by?: string;\r\n  sort_order?: 'asc' | 'desc';\r\n}\r\n\r\n// =============================================================================\r\n// UI STATE TYPES\r\n// =============================================================================\r\n\r\nexport interface LoadingState {\r\n  isLoading: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport interface WebSocketState {\r\n  isConnected: boolean;\r\n  connectionId?: string;\r\n  lastPing?: number;\r\n  reconnectAttempts: number;\r\n  error?: string | null;\r\n}\r\n\r\nexport interface DashboardState {\r\n  instruments: Instrument[];\r\n  realtimeData: Record<number, MarketData>;\r\n  activeAlerts: AlertLogWithDetails[];\r\n  systemHealth: HealthStatus | null;\r\n}\r\n\r\nexport interface FormValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\nexport interface FormState<T> {\r\n  data: T;\r\n  errors: FormValidationError[];\r\n  isSubmitting: boolean;\r\n  isDirty: boolean;\r\n}\r\n\r\n// =============================================================================\r\n// UTILITY TYPES\r\n// =============================================================================\r\n\r\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\r\nexport type RequiredFields<T, K extends keyof T> = T & Required<Pick<T, K>>;\r\nexport type DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GAEA;AACA;AACA;AAEA,UAAY,CAAAA,cAAc,uBAAdA,cAAc,EAAdA,cAAc,oBAAdA,cAAc,kBAAdA,cAAc,8BAAd,CAAAA,cAAc,OAM1B,UAAY,CAAAC,gBAAgB,uBAAhBA,gBAAgB,EAAhBA,gBAAgB,oBAAhBA,gBAAgB,wBAAhBA,gBAAgB,wBAAhB,CAAAA,gBAAgB,OAM5B,UAAY,CAAAC,QAAQ,uBAARA,QAAQ,EAARA,QAAQ,0BAARA,QAAQ,0BAARA,QAAQ,oCAARA,QAAQ,gCAARA,QAAQ,4CAAR,CAAAA,QAAQ,OAQpB,UAAY,CAAAC,aAAa,uBAAbA,aAAa,EAAbA,aAAa,kBAAbA,aAAa,kBAAbA,aAAa,oBAAbA,aAAa,kCAAbA,aAAa,kCAAbA,aAAa,0CAAbA,aAAa,8CAAbA,aAAa,sCAAb,CAAAA,aAAa,OAWzB,UAAY,CAAAC,WAAW,uBAAXA,WAAW,EAAXA,WAAW,kBAAXA,WAAW,4BAAXA,WAAW,wBAAX,CAAAA,WAAW,OAMvB,UAAY,CAAAC,cAAc,uBAAdA,cAAc,EAAdA,cAAc,sBAAdA,cAAc,8BAAdA,cAAc,gCAAdA,cAAc,4BAAdA,cAAc,kCAAdA,cAAc,0BAAd,CAAAA,cAAc,OAS1B;AACA;AACA;AA+DA;AACA;AACA;AAkBA;AACA;AACA;AA6DA;AACA;AACA;AAqDA;AACA;AACA;AAwCA;AACA;AACA;AA+BA;AACA;AACA;AAkCA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}