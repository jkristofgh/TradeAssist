### ðŸ”„ Project Awareness & Context
- **Read documentation files first** - Review README_TRADEASSIST.md, DEPLOYMENT.md, CONFIGURATION.md, and USER_GUIDE.md to understand current features and setup
- **Check project status** - The project has completed Phase 3 (Multi-Channel Notifications & Enterprise Resilience) and is ready for Phase 4 (Advanced Analytics)
- **Use current documentation** - All active documentation is in the root directory (not in PRP-PLANNING folders)
- **Create TASK.md if needed** - If task tracking is needed, create a simple TASK.md in the root directory with today's date
- **Follow established patterns** - Use existing code structure in src/backend and src/frontend as the guide for consistency
- **Use .venv** (the virtual environment) whenever executing Python commands, including for unit tests

### ðŸ§± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
  For TradeAssist this follows the pattern:
    - `api/` - FastAPI route handlers grouped by domain
    - `services/` - Business logic and external integrations
    - `models/` - Database models and data validation
    - `database/` - Database connection and utilities
- **Use clear, consistent imports** (prefer relative imports within packages).
- **Use pydantic-settings for environment variables** with proper validation and type hints.

### ðŸ§ª Testing & Reliability
- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### âœ… Task Completion
- **Use TodoWrite tool for task tracking** during active development conversations.
- **Mark tasks completed immediately** after finishing them using TodoWrite status updates.
- **Create TASK.md file** if long-term task tracking is needed beyond conversation scope.
- **Add discovered work** to the current todo list or create follow-up tasks as needed.

### ðŸ“‹ Documentation Maintenance Workflow
- **Before starting any new feature or significant change:**
  1. Review existing documentation to understand current state
  2. Identify which docs will need updates based on planned changes
- **During development:**
  1. Update documentation incrementally as you implement features
  2. Keep notes of environment variable changes, new endpoints, UI changes
- **Before committing code changes:**
  1. Review all 4 main documentation files for accuracy
  2. Update any references that changed (API endpoints, commands, file paths)
  3. Add any new features to USER_GUIDE.md
  4. Update tech stack in README_TRADEASSIST.md if dependencies changed
- **Documentation review checklist:**
  - [ ] API endpoint URLs match actual routes
  - [ ] Environment variables match .env.example
  - [ ] Commands work as documented (test them)
  - [ ] File paths and script names are correct
  - [ ] Tech stack lists reflect current dependencies
  - [ ] Setup instructions work on a fresh system

### ðŸ“Ž Style & Conventions
- **Use Python** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use `pydantic` for data validation**.
- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
- Write **docstrings for every function** using the Google style:
  ```python
  def example():
      """
      Brief summary.

      Args:
          param1 (type): Description.

      Returns:
          type: Description.
      """
  ```

### ðŸ“š Documentation & Explainability
- **Update documentation when making changes:**
  - **README_TRADEASSIST.md** - Main project documentation and feature overview
  - **DEPLOYMENT.md** - When setup steps, dependencies, or deployment process changes
  - **CONFIGURATION.md** - When adding new environment variables or config options
  - **USER_GUIDE.md** - When UI components, features, or user workflows change
  - **CLAUDE.md** - When development guidelines or project structure changes
- **Keep documentation synchronized** with actual implementation:
  - Update API endpoint references when routes change
  - Update environment variable examples when config changes
  - Update tech stack lists when dependencies change
  - Update command examples when scripts or processes change
- **Document new features immediately** - don't let documentation lag behind code
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what

### ðŸ“– Documentation Files Structure
- **README_TRADEASSIST.md** - Main project documentation (features, tech stack, quick start)
- **DEPLOYMENT.md** - Complete deployment and setup guide  
- **CONFIGURATION.md** - Comprehensive configuration reference (environment variables, settings)
- **USER_GUIDE.md** - User interface guide and feature documentation
- **CLAUDE.md** - Development guidelines and AI assistant instructions (this file)
- **TASK.md** - Task tracking and project status (create if needed)

### Code examples ###
- schwab-package: a python package using schwab-py: ../examples/schwab_package
- Demo application using schwab-package for basic demos: ../examples/SchwabWebBasic
- An Unofficial Charles Schwab API Client: https://schwab-py.readthedocs.io/en/latest/index.html


### ðŸ§  AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** â€“ only use known, verified Python packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.
